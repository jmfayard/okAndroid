package com.github.jmfayard.okandroid.screens.pri

import android.Manifest
import android.content.Context
import android.support.v7.widget.LinearLayoutManager
import android.support.v7.widget.RecyclerView
import com.github.jmfayard.okandroid.R
import com.github.jmfayard.okandroid.app
import com.github.jmfayard.okandroid.inflateViewFrom
import com.github.jmfayard.okandroid.screens.*
import com.github.jmfayard.okandroid.screens.pri.IdFrp.*
import com.github.jmfayard.okandroid.toast
import com.tbruyelle.rxpermissions2.Permission
import com.wealthfront.magellan.BaseScreenView
import io.reactivex.Observable
import io.reactivex.subjects.BehaviorSubject
import net.idik.lib.slimadapter.SlimAdapter
import timber.log.Timber


class PresentRenderInputScreen(
        val provider: ArticlesProvider = app().articlesProvider
) : ReactiveScreen<PresentRenderInputView>() {

    override fun screenTitle(): Int = PriTitle.id

    override fun createView(context: Context): PresentRenderInputView = PresentRenderInputView(context)

    val articleClicks = BehaviorSubject.create<Article>()


    override fun onRender(context: Context) {
        display?.setupRecyclerView {
            articleClicks.onNext(it)
        }
        val model: MainViewModel = present(
                updateButtonClicks = clicks(PriButtonUpdate),
                articleClicks = articleClicks,
                articlesProvider = provider,
                permissionProvider = permissionProvider(activity, Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_CONTACTS),
                prefsButtonClicks = Observable.never<Unit>(),
                dialogResults = Observable.never<DialogResult>()
        )
        renderModel(model.toDebugModel())


    }


    fun renderModel(model: MainViewModel) {

        with(model) {
            articles.render { display?.updateRecyclerViewData(it) }
            updateButtonIsEnabled.render { button(PriButtonUpdate)?.isEnabled = it }
            emptyViewIsVisible.render { v(PriEmptyView)?.visible = it }
            progressIsVisible.render { v(PriProgressLarge)?.visible = it }
            smallProgressIsVisible.render { v(PriProgressSmall)?.visible = it }
            updateButtonText.render { text(PriButtonUpdate)?.text = app().ctx.getString(it) }
            startDetailActivitySignals.render { toast("You clicked on $it") }
            permissionSignal.render { p : Permission ->
                Timber.i("permissionSignal: $p")
                if (!p.granted) toast("We need permission ${p.name} to continue")
            }
            dialogCmds.render { Timber.e("Dialogs: $it") }
            preferences.render { p : MviPrefs ->
                text(PriLabelPrefs)?.text = "Prefs: color=${p.fontColor} highlight=${p.backgroundColor}"
                Timber.w("Updated prefs: $p")
            }
            Unit
        }
    }



}



// Can be generated by $ androidstrings.kt layout {FILE}
// https://github.com/jmfayard/skripts/blob/44fb949b86288bed17a6a4b4eba9db656e6a09dc/kotlin/androidstrings.kt
enum class IdFrp(override val id: Int) : HasId {
    PriLayoutPrefs(R.id.pri_layout_prefs), // LinearLayout
    PriEmptyView(R.id.pri_empty_view), // TextView
    PriListTitles(R.id.pri_list_titles), // android.support.v7.widget.RecyclerView
    PriProgressLarge(R.id.pri_progress_large), // ProgressBar
    PriButtonUpdate(R.id.pri_button_update), // Button
    PriProgressSmall(R.id.pri_progress_small), // ProgressBar
    PriLabelPrefs(R.id.pri_label_prefs), // TextView
    PriButtonPrefs(R.id.pri_button_prefs), // Button
    PriLayout(R.layout.pri_screen),
    PriTitle(R.string.pri_title),
    PriItemLayout(R.layout.pri_item),
    PriItemTitle(R.id.pri_item_title)
}


class PresentRenderInputView(context: Context) : BaseScreenView<PresentRenderInputScreen>(context) {

    val slimAdapter: SlimAdapter = SlimAdapter.create()

    init {
        inflateViewFrom(PriLayout.id)
    }

    fun setupRecyclerView(onclick: (Article) -> Unit) {
        val recyclerView: RecyclerView = findViewById(PriListTitles.id)
        slimAdapter.register<Article>(PriItemLayout.id) { item: Article, injector ->
            injector.text(PriItemTitle.id, item.title)
            injector.clicked(PriItemTitle.id) {
                onclick(item)
            }
        }.attachTo(recyclerView)
        recyclerView.adapter = slimAdapter
        recyclerView.layoutManager = LinearLayoutManager(context)
    }

    fun recyclerViewData(): List<ListItem>? {
        return slimAdapter.data as? List<ListItem>
    }

    fun updateRecyclerViewData(items: List<ListItem>) {
        slimAdapter.updateData(items)
    }

}


