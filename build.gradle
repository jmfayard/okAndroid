buildscript {

    repositories {
        google()
        jcenter()

    }

    dependencies {
        classpath "com.android.tools.build:gradle:3.2.0"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.2.71"
    }
}
plugins {
    id "com.gradle.build-scan" version "1.16"
    id "jmfayard.github.io.gradle-kotlin-dsl-libs" version "0.2.3"
}


allprojects {

  repositories {
      jcenter()
      google()
      maven { url "https://jitpack.io" }
      maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
  }


  configurations.all {
      resolutionStrategy {
          force "io.reactivex.rxjava2:rxandroid:" + Versions.rxandroid
          eachDependency { details ->
              if (details.requested.group == "org.jetbrains.kotlin") {
                  details.useVersion Android.kotlin
              }
          }
      }
  }

}




/** $ gw i
 * Builds the app, install it and launch the main activity
 * You should usually launch the unit tests first by doing
 * $ gw t i
 ****/
task i(type: Exec) {
    def PACKAGE=Android.Package
    dependsOn Android.GradleInstallTask
    description "Install the app"
    commandLine "adb shell am start -n ${PACKAGE}/${PACKAGE}.MainActivity -a android.intent.action.MAIN -c android.intent.category.LAUNCHER".split(" ")
    doLast {
        println("App ${PACKAGE} has been installed ")
        println("")
        println("You can watch the logcat with")
        println("  \$ pidcat " + PACKAGE)
    }
}

/** $ gw monkey
 * Launch the android monkey in order to detect crashes early
 ****/
task monkey(type: Exec) {
    dependsOn ":i"
    description "launch the monkey"
    commandLine "bash -x gradle/monkey.sh ${Android.Package}".split(" ")
}

/*** $ gw t
 ** Launch the unit tests
 **/
task t() {
    dependsOn Android.GradleTestTask
    description "Run the unit tests"
    doLast {
        def path = new File("ok/build/reports/tests/testDebugUnitTest/index.html").absolutePath
        println("All unit tests have run")
        println("Details are available under...")
        println("\$ open ${path}")
    }
}

buildScan {
    setTermsOfServiceUrl("https://gradle.com/terms-of-service")
    setTermsOfServiceAgree("yes")
    publishAlways()
}



task printProperties {
    group = "help"
    doLast {
        def properties = ["org.gradle.java.home", "org.gradle.jvmargs"]
        def systemProperties = ["file.encoding", "user.country", "user.language", "java.io.tmpdir", "user.variant"]
        println("Detecting what could cause incompatible gradle daemons")
        println("Run ./gradlew printProperties from the command-line and the same task Android studio")
        println("See https://docs.gradle.org/4.1/userguide/build_environment.html")
        println("See https://docs.gradle.org/4.1/userguide/gradle_daemon.html#daemon_faq")
        println()
        println "JAVA_HOME=" + System.getenv("JAVA_HOME")
        properties.forEach { prop -> println(prop + "=" + project.findProperty(prop)) }
        systemProperties.forEach { prop -> println(prop + "=" + System.properties[prop]) }
    }
}
